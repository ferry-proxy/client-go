/*
Copyright 2022 Shiming Zhang.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ferry-proxy/api/apis/ferry/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FerryPolicyLister helps list FerryPolicies.
// All objects returned here must be treated as read-only.
type FerryPolicyLister interface {
	// List lists all FerryPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FerryPolicy, err error)
	// FerryPolicies returns an object that can list and get FerryPolicies.
	FerryPolicies(namespace string) FerryPolicyNamespaceLister
	FerryPolicyListerExpansion
}

// ferryPolicyLister implements the FerryPolicyLister interface.
type ferryPolicyLister struct {
	indexer cache.Indexer
}

// NewFerryPolicyLister returns a new FerryPolicyLister.
func NewFerryPolicyLister(indexer cache.Indexer) FerryPolicyLister {
	return &ferryPolicyLister{indexer: indexer}
}

// List lists all FerryPolicies in the indexer.
func (s *ferryPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.FerryPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FerryPolicy))
	})
	return ret, err
}

// FerryPolicies returns an object that can list and get FerryPolicies.
func (s *ferryPolicyLister) FerryPolicies(namespace string) FerryPolicyNamespaceLister {
	return ferryPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FerryPolicyNamespaceLister helps list and get FerryPolicies.
// All objects returned here must be treated as read-only.
type FerryPolicyNamespaceLister interface {
	// List lists all FerryPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FerryPolicy, err error)
	// Get retrieves the FerryPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FerryPolicy, error)
	FerryPolicyNamespaceListerExpansion
}

// ferryPolicyNamespaceLister implements the FerryPolicyNamespaceLister
// interface.
type ferryPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FerryPolicies in the indexer for a given namespace.
func (s ferryPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FerryPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FerryPolicy))
	})
	return ret, err
}

// Get retrieves the FerryPolicy from the indexer for a given namespace and name.
func (s ferryPolicyNamespaceLister) Get(name string) (*v1alpha1.FerryPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ferrypolicy"), name)
	}
	return obj.(*v1alpha1.FerryPolicy), nil
}
